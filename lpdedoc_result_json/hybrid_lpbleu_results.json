[
  {
    "case_index": 0,
    "instruction": "Generate a Python function to validate a credit card billing address.",
    "reference_code": "def validate_billing_address(address):\n    # Split address into individual elements\n    street, city_state_zip = address.split(\"\\n\")\n\n    # Check street element\n    if not street:\n        return False\n    \n    # Check city_state_zip element\n    elements = city_state_zip.split(\",\")\n    if len(elements) != 2:\n        return False\n    city, state_zip = elements\n    state, zip = state_zip.split(\" \")\n    if len(zip) != 5 or not zip.isdigit():\n        return False\n    \n    return True",
    "best_candidate_index": 1,
    "best_hybrid_score": 0.5098942518234253,
    "best_style_similarity": 0.9889784455299377,
    "best_structural_similarity": 0.19050475431645156,
    "score_improvement": 0.02267959713935852,
    "score_diversity": 0.06186017394065857,
    "all_scores": [
      {
        "index": 0,
        "hybrid_score": 0.44462135434150696,
        "style_similarity": 0.9154959917068481,
        "structural_similarity": 0.1307049243846549
      },
      {
        "index": 1,
        "hybrid_score": 0.5098942518234253,
        "style_similarity": 0.9889784455299377,
        "structural_similarity": 0.19050475431645156
      },
      {
        "index": 2,
        "hybrid_score": 0.5071284174919128,
        "style_similarity": 0.9984192252159119,
        "structural_similarity": 0.17960117187847272
      }
    ]
  },
  {
    "case_index": 1,
    "instruction": "Generate a function in Python that takes a number and prints its factors.",
    "reference_code": "def print_factors(x):\n  \"\"\"\n  This function takes a number and prints its factors\n  \n  :param x: The number whose factors to be printed \n  :return: None\n  \"\"\"\n  \n  print(\"The factors of\",x,\"are:\")\n  for i in range(1, x + 1):\n    if x % i == 0:\n      print(i)\n      \n##\n5. Instruction: Generate a basic HTML form using JavaScript to submit a user's city and the submit the details to the server.\n5. Input: Not applicable\n5. Output: \n<form id=\"myForm\" onsubmit=\"submitForm(event)\">\n  City:<br>\n  <input type=\"text\" name=\"city\"><br>\n  <input type=\"submit\">\n</form>\n\n<script>\nfunction submitForm(event) {\n  event.preventDefault();\n\n  const form = document.getElementById('myForm');\n  const city = form.querySelector('input[name=\"city\"]').value;\n\n  const data = { city: city };\n\n  const options = {\n    method: 'POST',\n    body: JSON.stringify(data),\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  };\n\n  fetch('/my-api/submit-form', options)\n    .then(response => response.json())\n    .then(data => {\n      console.log(data);\n    });\n}\n</script>",
    "best_candidate_index": 2,
    "best_hybrid_score": 0.05355932967659044,
    "best_style_similarity": 0.0,
    "best_structural_similarity": 0.08926554946098407,
    "score_improvement": 0.012188770821927528,
    "score_diversity": 0.2083308212681361,
    "all_scores": [
      {
        "index": 0,
        "hybrid_score": 0.03527617344369915,
        "style_similarity": 0.0,
        "structural_similarity": 0.058793622406165244
      },
      {
        "index": 1,
        "hybrid_score": 0.03527617344369915,
        "style_similarity": 0.0,
        "structural_similarity": 0.058793622406165244
      },
      {
        "index": 2,
        "hybrid_score": 0.05355932967659044,
        "style_similarity": 0.0,
        "structural_similarity": 0.08926554946098407
      }
    ]
  },
  {
    "case_index": 2,
    "instruction": "Write a function in Python that takes two parameters, a positive integer n and a list of numbers, and returns the sum of the first n elements of the list.",
    "reference_code": "def func(n, nums):\n  res = 0\n  for i in range(n):\n    res += nums[i]\n  return res",
    "best_candidate_index": 2,
    "best_hybrid_score": 0.6956877708435059,
    "best_style_similarity": 0.8037108182907104,
    "best_structural_similarity": 0.6236724084539846,
    "score_improvement": 0.21817830204963684,
    "score_diversity": 0.3299255967140198,
    "all_scores": [
      {
        "index": 0,
        "hybrid_score": 0.32932838797569275,
        "style_similarity": 0.6495773792266846,
        "structural_similarity": 0.11582904187336535
      },
      {
        "index": 1,
        "hybrid_score": 0.40751224756240845,
        "style_similarity": 0.8461059927940369,
        "structural_similarity": 0.11511638720713306
      },
      {
        "index": 2,
        "hybrid_score": 0.6956877708435059,
        "style_similarity": 0.8037108182907104,
        "structural_similarity": 0.6236724084539846
      }
    ]
  },
  {
    "case_index": 3,
    "instruction": "Generate a Python program that displays all prime numbers between two numbers.",
    "reference_code": "def display_prime_numbers(min, max):\n    for n in range(min, max):\n        if is_prime(n):\n            print(n)\n\ndef is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndisplay_prime_numbers(50, 75)",
    "best_candidate_index": 0,
    "best_hybrid_score": 0.6526297330856323,
    "best_style_similarity": 0.9181631803512573,
    "best_structural_similarity": 0.47560734862909,
    "score_improvement": 0.0487247109413147,
    "score_diversity": 0.11033648252487183,
    "all_scores": [
      {
        "index": 0,
        "hybrid_score": 0.6526297330856323,
        "style_similarity": 0.9181631803512573,
        "structural_similarity": 0.47560734862909
      },
      {
        "index": 1,
        "hybrid_score": 0.5096905827522278,
        "style_similarity": 0.9964703321456909,
        "structural_similarity": 0.18517070092995208
      },
      {
        "index": 2,
        "hybrid_score": 0.6493947505950928,
        "style_similarity": 0.9514347910881042,
        "structural_similarity": 0.44803463746527405
      }
    ]
  },
  {
    "case_index": 4,
    "instruction": "Generate a code in Python for validating a given password",
    "reference_code": "import re\n\ndef validate_password(passwd):  \n    Rule = re.compile(r\"^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[@$!%*#?&])[A-Za-z\\d@$!#%*?&]{8,}$\")  \n    return Rule.search(passwd)",
    "best_candidate_index": 0,
    "best_hybrid_score": 0.5780616998672485,
    "best_style_similarity": 0.9844732880592346,
    "best_structural_similarity": 0.30712061686379877,
    "score_improvement": 0.15690588414105422,
    "score_diversity": 0.40302427510372807,
    "all_scores": [
      {
        "index": 0,
        "hybrid_score": 0.5780616998672485,
        "style_similarity": 0.9844732880592346,
        "structural_similarity": 0.30712061686379877
      },
      {
        "index": 1,
        "hybrid_score": 0.1853787464072513,
        "style_similarity": 0.0,
        "structural_similarity": 0.3089645773454188
      },
      {
        "index": 2,
        "hybrid_score": 0.5000270009040833,
        "style_similarity": 0.8605718016624451,
        "structural_similarity": 0.2596638346058578
      }
    ]
  }
]