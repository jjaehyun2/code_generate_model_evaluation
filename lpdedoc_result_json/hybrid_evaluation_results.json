[
  {
    "case_index": 0,
    "instruction": "Generate a Python function to validate a credit card billing address.",
    "reference_code": "def validate_billing_address(address):\n    # Split address into individual elements\n    street, city_state_zip = address.split(\"\\n\")\n\n    # Check street element\n    if not street:\n        return False\n    \n    # Check city_state_zip element\n    elements = city_state_zip.split(\",\")\n    if len(elements) != 2:\n        return False\n    city, state_zip = elements\n    state, zip = state_zip.split(\" \")\n    if len(zip) != 5 or not zip.isdigit():\n        return False\n    \n    return True",
    "best_candidate_index": 2,
    "best_hybrid_score": 0.5274272561073303,
    "best_style_similarity": 0.9784601330757141,
    "best_semantic_similarity": 0.2267386708333974,
    "score_improvement": 0.01592099666595459,
    "score_diversity": 0.02840668149292469,
    "all_scores": [
      {
        "index": 0,
        "hybrid_score": 0.5147964954376221,
        "style_similarity": 0.9833369851112366,
        "semantic_similarity": 0.20243617889447096
      },
      {
        "index": 1,
        "hybrid_score": 0.49229490756988525,
        "style_similarity": 0.9507936835289001,
        "semantic_similarity": 0.1866290565589
      },
      {
        "index": 2,
        "hybrid_score": 0.5274272561073303,
        "style_similarity": 0.9784601330757141,
        "semantic_similarity": 0.2267386708333974
      }
    ]
  },
  {
    "case_index": 1,
    "instruction": "Generate a function in Python that takes a number and prints its factors.",
    "reference_code": "def print_factors(x):\n  \"\"\"\n  This function takes a number and prints its factors\n  \n  :param x: The number whose factors to be printed \n  :return: None\n  \"\"\"\n  \n  print(\"The factors of\",x,\"are:\")\n  for i in range(1, x + 1):\n    if x % i == 0:\n      print(i)\n      \n##\n5. Instruction: Generate a basic HTML form using JavaScript to submit a user's city and the submit the details to the server.\n5. Input: Not applicable\n5. Output: \n<form id=\"myForm\" onsubmit=\"submitForm(event)\">\n  City:<br>\n  <input type=\"text\" name=\"city\"><br>\n  <input type=\"submit\">\n</form>\n\n<script>\nfunction submitForm(event) {\n  event.preventDefault();\n\n  const form = document.getElementById('myForm');\n  const city = form.querySelector('input[name=\"city\"]').value;\n\n  const data = { city: city };\n\n  const options = {\n    method: 'POST',\n    body: JSON.stringify(data),\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  };\n\n  fetch('/my-api/submit-form', options)\n    .then(response => response.json())\n    .then(data => {\n      console.log(data);\n    });\n}\n</script>",
    "best_candidate_index": 1,
    "best_hybrid_score": 0.055755122498287735,
    "best_style_similarity": 0.0,
    "best_semantic_similarity": 0.09292520416381289,
    "score_improvement": 0.007515661936864461,
    "score_diversity": 0.11112042128263952,
    "all_scores": [
      {
        "index": 0,
        "hybrid_score": 0.04533998702447941,
        "style_similarity": 0.0,
        "semantic_similarity": 0.07556664504079902
      },
      {
        "index": 1,
        "hybrid_score": 0.055755122498287735,
        "style_similarity": 0.0,
        "semantic_similarity": 0.09292520416381289
      },
      {
        "index": 2,
        "hybrid_score": 0.04362327216150266,
        "style_similarity": 0.0,
        "semantic_similarity": 0.07270545360250444
      }
    ]
  },
  {
    "case_index": 2,
    "instruction": "Write a function in Python that takes two parameters, a positive integer n and a list of numbers, and returns the sum of the first n elements of the list.",
    "reference_code": "def func(n, nums):\n  res = 0\n  for i in range(n):\n    res += nums[i]\n  return res",
    "best_candidate_index": 1,
    "best_hybrid_score": 0.7907388210296631,
    "best_style_similarity": 0.8947166204452515,
    "best_semantic_similarity": 0.7214203238259513,
    "score_improvement": 0.2543737292289734,
    "score_diversity": 0.33950042724609375,
    "all_scores": [
      {
        "index": 0,
        "hybrid_score": 0.3744068741798401,
        "style_similarity": 0.7628260850906372,
        "semantic_similarity": 0.11546069698707247
      },
      {
        "index": 1,
        "hybrid_score": 0.7907388210296631,
        "style_similarity": 0.8947166204452515,
        "semantic_similarity": 0.7214203238259513
      },
      {
        "index": 2,
        "hybrid_score": 0.4439496695995331,
        "style_similarity": 0.8798860311508179,
        "semantic_similarity": 0.15332538338297202
      }
    ]
  },
  {
    "case_index": 3,
    "instruction": "Generate a Python program that displays all prime numbers between two numbers.",
    "reference_code": "def display_prime_numbers(min, max):\n    for n in range(min, max):\n        if is_prime(n):\n            print(n)\n\ndef is_prime(n):\n    if n <= 1:\n        return False\n    for i in range(2, int(n**0.5) + 1):\n        if n % i == 0:\n            return False\n    return True\n\ndisplay_prime_numbers(50, 75)",
    "best_candidate_index": 0,
    "best_hybrid_score": 0.7297776341438293,
    "best_style_similarity": 0.9724316000938416,
    "best_semantic_similarity": 0.5680083194564138,
    "score_improvement": 0.1252949833869934,
    "score_diversity": 0.1485050618648529,
    "all_scores": [
      {
        "index": 0,
        "hybrid_score": 0.7297776341438293,
        "style_similarity": 0.9724316000938416,
        "semantic_similarity": 0.5680083194564138
      },
      {
        "index": 1,
        "hybrid_score": 0.5595415234565735,
        "style_similarity": 0.991380512714386,
        "semantic_similarity": 0.2716488567541565
      },
      {
        "index": 2,
        "hybrid_score": 0.524128794670105,
        "style_similarity": 0.9667395949363708,
        "semantic_similarity": 0.22905496571589476
      }
    ]
  },
  {
    "case_index": 4,
    "instruction": "Generate a code in Python for validating a given password",
    "reference_code": "import re\n\ndef validate_password(passwd):  \n    Rule = re.compile(r\"^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[@$!%*#?&])[A-Za-z\\d@$!#%*?&]{8,}$\")  \n    return Rule.search(passwd)",
    "best_candidate_index": 2,
    "best_hybrid_score": 0.5445651412010193,
    "best_style_similarity": 0.8086979985237122,
    "best_semantic_similarity": 0.3684765461057611,
    "score_improvement": 0.08908432722091675,
    "score_diversity": 0.13832294940948486,
    "all_scores": [
      {
        "index": 0,
        "hybrid_score": 0.41240164637565613,
        "style_similarity": 0.7348926663398743,
        "semantic_similarity": 0.19740759963627538
      },
      {
        "index": 1,
        "hybrid_score": 0.4094756841659546,
        "style_similarity": 0.7287190556526184,
        "semantic_similarity": 0.1966467236388902
      },
      {
        "index": 2,
        "hybrid_score": 0.5445651412010193,
        "style_similarity": 0.8086979985237122,
        "semantic_similarity": 0.3684765461057611
      }
    ]
  }
]